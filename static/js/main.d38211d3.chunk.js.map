{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","state","temp","tododata","whichtoshow","handlechange","event","target","value","setState","formatTime","date","hours","getHours","minutes","getMinutes","ampm","toString","padStart","addToList","Date","today","shortid","generate","getDate","toLocaleString","month","localStorage","setItem","JSON","stringify","document","getElementById","removeTodo","todo","cpdata","splice","indexOf","clearAll","clear","addToComplete","data","map","t","id","console","log","getItem","this","parse","filter","iscomplete","className","type","onChange","placeholder","onClick","length","text","completeddate","style","display","flexDirection","margin","width","height","fontSize","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.d38211d3.chunk.js","sourcesContent":["import { Component } from 'react';\nimport './App.css';\n// import '/TodoDarkMode.css';\nimport './TodoDarkMode.css';\nimport shortid from 'shortid';\n\n\nclass App extends Component {\n  state = {\n    temp: \"\",\n    tododata: [],\n    whichtoshow: \"\"\n  }\n  \n  handlechange = (event) => {\n    if(event.target.value!==\"\"){\n      this.setState({ temp: event.target.value });\n    }\n    \n  }\n  formatTime = (date) => {\n    let hours = date.getHours();\n    let minutes = date.getMinutes();\n    let ampm = hours >= 12 ? 'PM' : 'AM';\n    hours = hours % 12 ;\n    hours = hours ? hours : 12;\n    minutes = minutes.toString().padStart(2,'0');\n    let strTime = hours + ':' + minutes + ' ' + ampm;\n    return strTime;\n  } \n  \n  addToList = () => {\n    const date = new Date();\n    var today = this.formatTime(date);\n\n    if(this.state.temp!==\"\"){\n      this.setState({ \n        tododata: [{ \"id\": shortid.generate(), \n        \"text\": this.state.temp, \n        \"date\": date.getDate() + ' - ' + date.toLocaleString('default',{month:'long'}) + ' - ' + today, \n        \"iscomplete\": false },...this.state.tododata],temp:\"\"\n      },() => {\n        localStorage.setItem(\"data\",JSON.stringify(this.state.tododata));\n        \n      }\n      );  \n    }\n    \n    document.getElementById(\"userinput\").value=\"\";\n    \n  }\n\n  componentDidMount(){\n    if(localStorage.getItem(\"data\")!==null){\n      this.setState({tododata:JSON.parse(localStorage.getItem(\"data\"))})\n    }\n  }\n\n  removeTodo = (todo) => {\n    const cpdata = this.state.tododata;\n    cpdata.splice(cpdata.indexOf(todo),1);\n    this.setState({tododata:cpdata});\n    localStorage.setItem(\"data\", JSON.stringify(this.state.tododata));\n  }\n\n  clearAll = () => {\n    this.setState({ tododata: [] });\n    localStorage.clear(\"data\");\n  }  \n  \n  addToComplete = (todo) => {\n    const date = new Date();\n    var today = this.formatTime(date);\n\n    let data = this.state.tododata.map((t)=>{\n      if(t.id===todo.id){\n        return {...todo,\"id\":todo.id,\"iscomplete\":true, \"date\":todo.date ,\"completeddate\": date.getDate() + ' - ' + date.toLocaleString('default',{month:'long'}) + ' - ' + today}\n      }\n      else{\n        return t;\n      }\n\n    })\n    \n    console.log(data);\n    localStorage.setItem(\"data\",JSON.stringify(data));\n    this.setState({tododata:data});\n    \n  }\n\n  render() {\n    let tododata = [{}];\n    \n      if (this.state.whichtoshow === \"completed\") {\n        tododata = this.state.tododata.filter((\n          todo => todo.iscomplete\n        ))\n      }\n      else if(this.state.whichtoshow===\"active\") {\n        tododata = this.state.tododata.filter((          \n          todo => !todo.iscomplete\n        ))\n      }\n      else{\n        tododata = this.state.tododata;\n      }\n   \n    return (\n      <body>\n      <div className=\"maincontainer\">\n        \n        <header>Todo List</header>\n        <div className=\"inputbox\">\n        <input type=\"text\" id=\"userinput\" onChange={this.handlechange} placeholder=\"add something\" />\n        \n        </div> \n        <div className=\"buttonlist\">\n        <button onClick={this.addToList}>add</button>&nbsp;\n        <button onClick={this.clearAll}>clear all</button>&nbsp;\n        <button onClick={() => this.setState({ whichtoshow: \"completed\" })}>completed</button>&nbsp;\n        <button onClick={() => this.setState({ whichtoshow: \"active\" })}>active</button>\n        </div>\n        <br></br>\n        <center> Tasks left : {this.state.tododata.filter((todo)=>!todo.iscomplete).length} </center>\n        <br></br>\n        <div className=\"todolist\"> \n          {tododata.map((todo) =>\n            \n            <div className=\"todoitems\" key={todo.id}>\n            Task: {todo.text}\n            <br></br>\n            \n            Added Time:&nbsp;{todo.date}\n            <br></br>\n            \n            {todo.iscomplete ?\n            <div>\n            Completed Time:&nbsp;{todo.completeddate}</div>:null  \n            }\n\n            <div style={{display:'flex', flexDirection:\"column\", margin:'auto'}}></div>\n            \n            <div className=\"todobtndiv\">\n            <button style={{width:30, height:30, fontSize:15}} onClick={()=>this.removeTodo(todo)}>✗</button>\n            &nbsp;&nbsp;\n            {!todo.iscomplete ?\n            \n            <button onClick={() => this.addToComplete(todo)} id=\"completebtn\" style={{width:30, height:30, fontSize:15}} className=\"cmpbtn\" >✓</button>\n            :null\n            }  \n            </div>\n            \n            \n            </div>\n          )}\n          <br></br>\n             \n        </div>\n       \n        <br></br>\n        </div>\n        </body>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","state","temp","tododata","completed","whichtoshow","handlechange","event","preventDefault","target","value","setState","addToList","today","Date","shortid","generate","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","localStorage","setItem","JSON","stringify","removeTodo","todo","cpdata","splice","indexOf","clearAll","addToComplete","data","map","t","id","console","log","this","parse","getItem","filter","iscomplete","className","type","onChange","placeholder","onClick","text","date","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b088cd0b.chunk.js","sourcesContent":["import { Component } from 'react';\nimport './App.css';\nimport './Todo.css';\nimport shortid from 'shortid';\n\nclass App extends Component {\n  state = {\n    temp: \"\",\n    tododata: [],\n    completed: [],\n    whichtoshow: \"\"\n  }\n\n  handlechange = (event) => {\n    event.preventDefault();\n    if(event.target.value!==\"\"){\n    this.setState({ temp: event.target.value });\n    }\n  }\n\n  addToList = () => {\n    var today = new Date();\n    this.setState({ tododata: [{ \"id\": shortid.generate(), \"text\": this.state.temp, \"date\": today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate() + '-' + today.getHours() + ':' + today.getMinutes() + ':' + today.getSeconds(), \"iscomplete\": false }, ...this.state.tododata] })\n    localStorage.setItem(\"data\", JSON.stringify(this.state.tododata));\n    this.setState({ temp: \"\" });\n  }\n\n  componentDidMount(){\n    this.setState({tododata:JSON.parse(localStorage.getItem(\"data\"))})\n  }\n\n  removeTodo = (todo) => {\n    const cpdata = this.state.tododata;\n    cpdata.splice(cpdata.indexOf(todo),1);\n    this.setState({tododata:cpdata});\n    localStorage.setItem(\"data\", JSON.stringify(this.state.tododata));\n  }\n\n  clearAll = () => {\n    this.setState({ tododata: [] });\n    localStorage.setItem(\"data\", JSON.stringify(this.state.tododata));\n  }  \n  \n  addToComplete = (todo) => {\n    const today = new Date();\n    let data = this.state.tododata.map((t)=>{\n      if(t.id===todo.id){\n        return {...todo,\"id\":todo.id,\"iscomplete\":true,\"date\": today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate() + '-' + today.getHours() + ':' + today.getMinutes() + ':' + today.getSeconds()}\n      }\n      else{\n        return t;\n      }\n     \n      \n    })\n    \n    console.log(data);\n    localStorage.setItem(\"data\",JSON.stringify(data));\n    this.setState({tododata:data});\n    \n    // this.setState({tododata:[{\"iscomplete\":true,...todo},...this.state.tododata]})\n    // const cpdata = this.state.tododata\n    // this.setState({tododata:cpdata})\n  }\n\n  \n  \n\n  render() {\n    let tododata = [];\n    if (this.state.whichtoshow === \"completed\") {\n      tododata = this.state.tododata.filter((\n        todo => todo.iscomplete\n      ))\n    }\n    else if(this.state.whichtoshow===\"active\") {\n      tododata = this.state.tododata.filter((          \n        todo => !todo.iscomplete\n      ))\n    }\n    else{\n      tododata = this.state.tododata;\n    }\n    return (\n      <body>\n      <div className=\"maincontainer\">\n\n        <header>Todo List</header>\n        <div className=\"inputbox\">\n        <input type=\"text\" onChange={this.handlechange} value={this.state.temp} placeholder=\"add something\" />\n        </div>\n        <div className=\"buttonlist\">\n        <button onClick={this.addToList}>add</button>&nbsp;\n        <button onClick={this.clearAll}>clear all</button>&nbsp;\n        <button onClick={() => this.setState({ whichtoshow: \"completed\" })}>completed</button>&nbsp;\n        <button onClick={() => this.setState({ whichtoshow: \"active\" })}>active todos</button>\n        </div>\n        <br></br>\n        <div className=\"todolist\">\n          \n          {tododata.map((todo) =>\n            <div className=\"todoitems\" key={todo.id}>Task: {todo.text} \n            <br></br>\n            Time:  &nbsp; {todo.date} &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <button onClick={()=>this.removeTodo(todo)}>✗</button>\n          &nbsp;\n            {!todo.iscomplete ?\n            <button onClick={() => this.addToComplete(todo)} id=\"completebtn\" className=\"cmpbtn\" >✓</button>\n            :null\n            }  \n              \n            </div>\n          )}\n        </div><br></br>\n        </div>\n        </body>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
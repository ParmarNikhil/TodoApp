{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","state","temp","tododata","completed","whichtoshow","handlechange","event","preventDefault","target","value","setState","addToList","today","Date","shortid","generate","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","localStorage","setItem","JSON","stringify","removeTodo","todo","cpdata","splice","indexOf","clearAll","clear","addToComplete","data","map","t","id","console","log","getItem","this","parse","filter","iscomplete","className","type","onChange","placeholder","onClick","text","date","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2dd81371.chunk.js","sourcesContent":["import { Component } from 'react';\nimport './App.css';\nimport './Todo.css';\nimport shortid from 'shortid';\n\nclass App extends Component {\n  state = {\n    temp: \"\",\n    tododata: [],\n    completed: [],\n    whichtoshow: \"\"\n  }\n\n  handlechange = (event) => {\n    event.preventDefault();\n    if(event.target.value!==\"\"){\n    this.setState({ temp: event.target.value });\n    }\n  }\n\n  addToList = () => {\n    var today = new Date();\n    this.setState({ tododata: [{ \"id\": shortid.generate(), \"text\": this.state.temp, \"date\": today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate() + '-' + today.getHours() + ':' + today.getMinutes() + ':' + today.getSeconds(), \"iscomplete\": false }, ...this.state.tododata] })\n    localStorage.setItem(\"data\", JSON.stringify(this.state.tododata));\n    this.setState({ temp: \"\" });\n  }\n\n  componentDidMount(){\n    if(localStorage.getItem(\"data\")!==null){\n      this.setState({tododata:JSON.parse(localStorage.getItem(\"data\"))})\n    }\n  }\n\n  removeTodo = (todo) => {\n    const cpdata = this.state.tododata;\n    cpdata.splice(cpdata.indexOf(todo),1);\n    this.setState({tododata:cpdata});\n    localStorage.setItem(\"data\", JSON.stringify(this.state.tododata));\n  }\n\n  clearAll = () => {\n    this.setState({ tododata: [] });\n    localStorage.clear(\"data\");\n  }  \n  \n  addToComplete = (todo) => {\n    const today = new Date();\n    let data = this.state.tododata.map((t)=>{\n      if(t.id===todo.id){\n        return {...todo,\"id\":todo.id,\"iscomplete\":true,\"date\": today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate() + '-' + today.getHours() + ':' + today.getMinutes() + ':' + today.getSeconds()}\n      }\n      else{\n        return t;\n      }\n     \n      \n    })\n    \n    console.log(data);\n    localStorage.setItem(\"data\",JSON.stringify(data));\n    this.setState({tododata:data});\n    \n    // this.setState({tododata:[{\"iscomplete\":true,...todo},...this.state.tododata]})\n    // const cpdata = this.state.tododata\n    // this.setState({tododata:cpdata})\n  }\n\n  render() {\n    let tododata = [{}];\n    \n      if (this.state.whichtoshow === \"completed\") {\n        tododata = this.state.tododata.filter((\n          todo => todo.iscomplete\n        ))\n      }\n      else if(this.state.whichtoshow===\"active\") {\n        tododata = this.state.tododata.filter((          \n          todo => !todo.iscomplete\n        ))\n      }\n      else{\n        tododata = this.state.tododata;\n      }\n   \n    return (\n      <body>\n      <div className=\"maincontainer\">\n\n        <header>Todo List</header>\n        <div className=\"inputbox\">\n        <input type=\"text\" onChange={this.handlechange} value={this.state.temp} placeholder=\"add something\" />\n        </div>\n        <div className=\"buttonlist\">\n        <button onClick={this.addToList}>add</button>&nbsp;\n        <button onClick={this.clearAll}>clear all</button>&nbsp;\n        <button onClick={() => this.setState({ whichtoshow: \"completed\" })}>completed</button>&nbsp;\n        <button onClick={() => this.setState({ whichtoshow: \"active\" })}>active todos</button>\n        </div>\n        <br></br>\n        <div className=\"todolist\">\n          \n          {tododata.map((todo) =>\n            <div className=\"todoitems\" key={todo.id}>Task: {todo.text} \n            <br></br>\n            Time:  &nbsp; {todo.date} &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <button onClick={()=>this.removeTodo(todo)}>✗</button>\n          &nbsp;\n            {!todo.iscomplete ?\n            <button onClick={() => this.addToComplete(todo)} id=\"completebtn\" className=\"cmpbtn\" >✓</button>\n            :null\n            }  \n              \n            </div>\n          )}\n        </div><br></br>\n        </div>\n        </body>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
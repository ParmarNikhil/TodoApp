{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","state","temp","tododata","whichtoshow","handlechange","event","setState","target","value","addToList","today","Date","shortid","generate","getDate","getMonth","getFullYear","getHours","getMinutes","getSeconds","localStorage","setItem","JSON","stringify","document","getElementById","removeTodo","todo","cpdata","splice","indexOf","clearAll","clear","addToComplete","data","map","t","id","date","console","log","getItem","this","parse","filter","iscomplete","className","type","onChange","placeholder","onClick","text","completeddate","style","margin","marginTop","marginBottom","width","height","fontSize","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.411e45e3.chunk.js","sourcesContent":["import { Component } from 'react';\nimport './App.css';\n// import '/TodoDarkMode.css';\nimport './TodoDarkMode.css';\nimport shortid from 'shortid';\n\nclass App extends Component {\n  state = {\n    temp: \"\",\n    tododata: [],\n    whichtoshow: \"\"\n  }\n  \n  handlechange = (event) => {\n    this.setState({ temp: event.target.value });\n  }\n\n  addToList = () => {\n    var today = new Date();\n    if(this.state.temp!==\"\"){\n      this.setState({ \n        tododata: [{ \"id\": shortid.generate(), \n        \"text\": this.state.temp, \n        \"date\": today.getDate() + '-' + (today.getMonth() + 1) + '-' + today.getFullYear() + '-' + today.getHours() + ':' + today.getMinutes() + ':' + today.getSeconds(), \n        \"iscomplete\": false }, ...this.state.tododata]\n      },() => {\n        localStorage.setItem(\"data\",JSON.stringify(this.state.tododata));\n      }\n      );  \n    }\n    \n    document.getElementById(\"userinput\").value=\"\";\n    \n  }\n\n  componentDidMount(){\n    if(localStorage.getItem(\"data\")!==null){\n      this.setState({tododata:JSON.parse(localStorage.getItem(\"data\"))})\n    }\n  }\n\n  removeTodo = (todo) => {\n    const cpdata = this.state.tododata;\n    cpdata.splice(cpdata.indexOf(todo),1);\n    this.setState({tododata:cpdata});\n    localStorage.setItem(\"data\", JSON.stringify(this.state.tododata));\n  }\n\n  clearAll = () => {\n    this.setState({ tododata: [] });\n    localStorage.clear(\"data\");\n  }  \n  \n  addToComplete = (todo) => {\n    const today = new Date();\n    let data = this.state.tododata.map((t)=>{\n      if(t.id===todo.id){\n        return {...todo,\"id\":todo.id,\"iscomplete\":true, \"date\":todo.date ,\"completeddate\": today.getDate() + '-' + (today.getMonth() + 1) + '-' + today.getFullYear() + '-' + today.getHours() + ':' + today.getMinutes() + ':' + today.getSeconds()}\n      }\n      else{\n        return t;\n      }\n\n    })\n    \n    console.log(data);\n    localStorage.setItem(\"data\",JSON.stringify(data));\n    this.setState({tododata:data});\n    \n  }\n\n  render() {\n    let tododata = [{}];\n    \n      if (this.state.whichtoshow === \"completed\") {\n        tododata = this.state.tododata.filter((\n          todo => todo.iscomplete\n        ))\n      }\n      else if(this.state.whichtoshow===\"active\") {\n        tododata = this.state.tododata.filter((          \n          todo => !todo.iscomplete\n        ))\n      }\n      else{\n        tododata = this.state.tododata;\n      }\n   \n    return (\n      <body>\n      <div className=\"maincontainer\">\n\n        <header>Todo List</header>\n        <div className=\"inputbox\">\n        <input type=\"text\" id=\"userinput\" onChange={this.handlechange} placeholder=\"add something\" />\n        </div>\n        <div className=\"buttonlist\">\n        <button onClick={this.addToList}>add</button>&nbsp;\n        <button onClick={this.clearAll}>clear all</button>&nbsp;\n        <button onClick={() => this.setState({ whichtoshow: \"completed\" })}>completed</button>&nbsp;\n        <button onClick={() => this.setState({ whichtoshow: \"active\" })}>active todos</button>\n        </div>\n        <br></br>\n       \n        <div className=\"todolist\"> \n          {tododata.map((todo) =>\n            \n            <div className=\"todoitems\" key={todo.id}>\n            Task: {todo.text}\n            <br></br>\n            Added Time:{todo.date}\n            {todo.iscomplete ?\n            <div>Completed Time:{todo.completeddate}</div>:null  \n            }\n\n            <div style={{margin:'auto'}}></div>\n            \n            <button style={{marginTop:'auto', marginBottom:'auto', width:30, height:30, fontSize:15}} onClick={()=>this.removeTodo(todo)}>✗</button>\n            \n            {!todo.iscomplete ?\n            <button onClick={() => this.addToComplete(todo)} id=\"completebtn\" style={{marginTop:'auto', marginBottom:'auto',width:30, height:30, fontSize:15}} className=\"cmpbtn\" >✓</button>\n            :null\n            }  \n            \n            \n            </div>\n            \n          )}\n        </div>\n       \n        <br></br>\n        </div>\n        </body>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}